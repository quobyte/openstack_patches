diff --git a/etc/nova/rootwrap.d/compute.filters b/etc/nova/rootwrap.d/compute.filters
index c846b89..fd62234 100644
--- a/etc/nova/rootwrap.d/compute.filters
+++ b/etc/nova/rootwrap.d/compute.filters
@@ -247,5 +247,9 @@ ploop: CommandFilter, ploop, root
 # nova/virt/libvirt/utils.py: 'xend', 'status'
 xend: CommandFilter, xend, root
 
+# nova/virt/libvirt/volume/quobyte.py
+mount.quobyte: CommandFilter, mount.quobyte, root
+umount.quobyte: CommandFilter, umount.quobyte, root
+
 # nova/virt/libvirt/utils.py:
 touch: CommandFilter, touch, root
diff --git a/nova/tests/unit/virt/libvirt/volume/test_quobyte.py b/nova/tests/unit/virt/libvirt/volume/test_quobyte.py
index 8d16cad..78f42da 100644
--- a/nova/tests/unit/virt/libvirt/volume/test_quobyte.py
+++ b/nova/tests/unit/virt/libvirt/volume/test_quobyte.py
@@ -31,9 +31,12 @@ from nova.virt.libvirt.volume import quobyte
 class QuobyteTestCase(test.NoDBTestCase):
     """Tests the nova.virt.libvirt.volume.quobyte module utilities."""
 
+    @mock.patch.object(os.path, "exists", return_value=False)
     @mock.patch.object(fileutils, "ensure_tree")
     @mock.patch.object(utils, "execute")
-    def test_quobyte_mount_volume(self, mock_execute, mock_ensure_tree):
+    def test_quobyte_mount_volume_not_systemd(self, mock_execute,
+                                              mock_ensure_tree,
+                                              mock_exists):
         mnt_base = '/mnt'
         quobyte_volume = '192.168.1.1/volume-00001'
         export_mnt_base = os.path.join(mnt_base,
@@ -45,15 +48,44 @@ class QuobyteTestCase(test.NoDBTestCase):
         expected_commands = [mock.call('mount.quobyte',
                                        quobyte_volume,
                                        export_mnt_base,
-                                       check_exit_code=[0, 4])
+                                       check_exit_code=[0, 4],
+                                       run_as_root=True)
                              ]
         mock_execute.assert_has_calls(expected_commands)
+        mock_exists.assert_called_once_with(" /run/systemd/system")
 
+    @mock.patch.object(os.path, "exists", return_value=True)
+    @mock.patch.object(fileutils, "ensure_tree")
+    @mock.patch.object(utils, "execute")
+    def test_quobyte_mount_volume_systemd(self, mock_execute,
+                                          mock_ensure_tree,
+                                          mock_exists):
+        mnt_base = '/mnt'
+        quobyte_volume = '192.168.1.1/volume-00001'
+        export_mnt_base = os.path.join(mnt_base,
+                                       utils.get_hash_str(quobyte_volume))
+
+        quobyte.mount_volume(quobyte_volume, export_mnt_base)
+
+        mock_ensure_tree.assert_called_once_with(export_mnt_base)
+        expected_commands = [mock.call('systemd-run',
+                                       'mount.quobyte',
+                                       '-f',
+                                       quobyte_volume,
+                                       export_mnt_base,
+                                       check_exit_code=[0, 4],
+                                       run_as_root=True)
+                             ]
+        mock_execute.assert_has_calls(expected_commands)
+        mock_exists.assert_called_once_with(" /run/systemd/system")
+
+    @mock.patch.object(os.path, "exists", return_value=False)
     @mock.patch.object(fileutils, "ensure_tree")
     @mock.patch.object(utils, "execute")
     def test_quobyte_mount_volume_with_config(self,
                                               mock_execute,
-                                              mock_ensure_tree):
+                                              mock_ensure_tree,
+                                              mock_exists):
         mnt_base = '/mnt'
         quobyte_volume = '192.168.1.1/volume-00001'
         export_mnt_base = os.path.join(mnt_base,
@@ -70,9 +102,11 @@ class QuobyteTestCase(test.NoDBTestCase):
                                        export_mnt_base,
                                        '-c',
                                        config_file_dummy,
-                                       check_exit_code=[0, 4])
+                                       check_exit_code=[0, 4],
+                                       run_as_root=True)
                              ]
         mock_execute.assert_has_calls(expected_commands)
+        mock_exists.assert_called_once_with(" /run/systemd/system")
 
     @mock.patch.object(fileutils, "ensure_tree")
     @mock.patch.object(utils, "execute",
@@ -99,7 +133,8 @@ class QuobyteTestCase(test.NoDBTestCase):
         quobyte.umount_volume(export_mnt_base)
 
         mock_execute.assert_called_once_with('umount.quobyte',
-                                             export_mnt_base)
+                                             export_mnt_base,
+                                             run_as_root=True)
 
     @mock.patch.object(quobyte.LOG, "error")
     @mock.patch.object(utils, "execute")
@@ -324,8 +359,8 @@ class LibvirtQuobyteVolumeDriverTestCase(
         mnt_base = '/mnt'
         self.flags(quobyte_mount_point_base=mnt_base, group='libvirt')
 
         libvirt_driver = quobyte.LibvirtQuobyteVolumeDriver(self.fake_host)
-        export_string = 'quobyte://192.168.1.1/volume-00001'
+        export_string = 'quobyte:192.168.1.1/volume-00001'
 
         connection_info = {'data': {'export': export_string,
                                     'name': self.name}}
@@ -341,6 +376,8 @@ class LibvirtQuobyteVolumeDriverTestCase(
                               libvirt_driver.connect_volume,
                               connection_info,
                               self.disk_info)
+            mock_is_mounted.assert_called_once_with(mock.ANY,
+                                                    "quobyte@" + export_string)
 
     def test_libvirt_quobyte_driver_normalize_export_with_protocol(self):
         mnt_base = '/mnt'
diff --git a/nova/virt/libvirt/volume/quobyte.py b/nova/virt/libvirt/volume/quobyte.py
index 199439b..05e2933 100644
--- a/nova/virt/libvirt/volume/quobyte.py
+++ b/nova/virt/libvirt/volume/quobyte.py
@@ -56,6 +56,10 @@ def mount_volume(volume, mnt_base, configfile=None):
     fileutils.ensure_tree(mnt_base)
 
     command = ['mount.quobyte', volume, mnt_base]
+    if os.path.exists(" /run/systemd/system"):
+        # Note(kaisers): with systemd this requires a separate CGROUP to
+        # prevent Nova service stop/restarts from killing the mount.
+        command = ['systemd-run', 'mount.quobyte', '-f', volume, mnt_base]
     if configfile:
         command.extend(['-c', configfile])
 
@@ -63,14 +67,14 @@ def mount_volume(volume, mnt_base, configfile=None):
               volume,
               mnt_base)
     # Run mount command but do not fail on already mounted exit code
-    utils.execute(*command, check_exit_code=[0, 4])
+    utils.execute(*command, check_exit_code=[0, 4], run_as_root=True)
     LOG.info(_LI('Mounted volume: %s'), volume)
 
 
 def umount_volume(mnt_base):
     """Wraps execute calls for unmouting a Quobyte volume"""
     try:
-        utils.execute('umount.quobyte', mnt_base)
+        utils.execute('umount.quobyte', mnt_base, run_as_root=True)
     except processutils.ProcessExecutionError as exc:
         if 'Device or resource busy' in six.text_type(exc):
             LOG.error(_LE("The Quobyte volume at %s is still in use."),
@@ -138,8 +142,8 @@ class LibvirtQuobyteVolumeDriver(fs.LibvirtBaseFileSystemVolumeDriver):
 
         if not mounted:
             mount_volume(quobyte_volume,
-                                 mount_path,
-                                 CONF.libvirt.quobyte_client_cfg)
+                         mount_path,
+                         CONF.libvirt.quobyte_client_cfg)
 
         validate_volume(mount_path)
 
