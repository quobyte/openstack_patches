diff --git cinder/volume/drivers/quobyte.py cinder/volume/drivers/quobyte.py
index bf6f231..7aed494 100644
--- cinder/volume/drivers/quobyte.py
+++ cinder/volume/drivers/quobyte.py
@@ -17,13 +17,17 @@
 import errno
 import os
 import psutil
+import re
+import shutil
 
 from oslo_concurrency import processutils
 from oslo_config import cfg
 from oslo_log import log as logging
 from oslo_utils import fileutils
+from oslo_utils.fnmatch import fnmatch
 
 from cinder import compute
+from cinder import coordination
 from cinder import exception
 from cinder.i18n import _
 from cinder.image import image_utils
@@ -32,7 +36,7 @@ from cinder import utils
 from cinder.volume import configuration
 from cinder.volume.drivers import remotefs as remotefs_drv
 
-VERSION = '1.1.5'
+VERSION = '1.1.8'
 
 LOG = logging.getLogger(__name__)
 
@@ -45,8 +49,7 @@ volume_opts = [
     cfg.BoolOpt('quobyte_sparsed_volumes',
                 default=True,
                 help=('Create volumes as sparse files which take no space.'
-                      ' If set to False, volume is created as regular file.'
-                      'In such case volume creation takes a lot of time.')),
+                      ' If set to False, volume is created as regular file.')),
     cfg.BoolOpt('quobyte_qcow2_volumes',
                 default=True,
                 help=('Create volumes as QCOW2 files rather than raw files.')),
@@ -54,6 +57,21 @@ volume_opts = [
                default='$state_path/mnt',
                help=('Base dir containing the mount point'
                      ' for the Quobyte volume.')),
+    cfg.BoolOpt('quobyte_volume_from_snapshot_cache',
+                default=False,
+                help=('Create a cache of volumes from merged snapshots to '
+                      'speed up creation of multiple volumes from a single '
+                      'snapshot.')),
+    cfg.BoolOpt('quobyte_overlay_volumes',
+                default=False,
+                help=('Create new volumes from the volume_from_snapshot_cache'
+                      ' by creating overlay files instead of full copies. This'
+                      ' speeds up the creation of volumes from this cache.'
+                      ' This feature requires the options'
+                      ' quobyte_qcow2_volumes and'
+                      ' quobyte_volume_from_snapshot_cache to be set to'
+                      ' True. If one of these is set to False this option is'
+                      ' ignored.'))
 ]
 
 CONF = cfg.CONF
@@ -86,7 +104,9 @@ class QuobyteDriver(remotefs_drv.RemoteFSSnapDriverDistributed):
         1.1.3 - Explicitely mounts Quobyte volumes w/o xattrs
         1.1.4 - Fixes capability to configure redundancy in quobyte_volume_url
         1.1.5 - Enables extension of volumes with snapshots
-
+        1.1.6 - Optimizes volume creation with some configurations
+        1.1.7 - Adds optional snapshot merge caching
+        1.1.8 - Adds overlay based volumes for snapshot merge caching
     """
 
     driver_volume_type = 'quobyte'
@@ -97,6 +117,8 @@ class QuobyteDriver(remotefs_drv.RemoteFSSnapDriverDistributed):
     # ThirdPartySystems wiki page
     CI_WIKI_NAME = "Quobyte_CI"
 
+    QUOBYTE_VOLUME_SNAP_CACHE_DIR_NAME = "volume_from_snapshot_cache"
+
     def __init__(self, execute=processutils.execute, *args, **kwargs):
         super(QuobyteDriver, self).__init__(*args, **kwargs)
         self.configuration.append_config_values(volume_opts)
@@ -104,6 +126,137 @@ class QuobyteDriver(remotefs_drv.RemoteFSSnapDriverDistributed):
         # Used to manage snapshots which are currently attached to a VM.
         self._nova = None
 
+    def _create_regular_file(self, path, size):
+        """Creates a regular file of given size in GiB."""
+        self._execute('fallocate', '-l', '%sGiB' % size,
+                      path, run_as_root=self._execute_as_root)
+
+    @coordination.synchronized('{self.driver_prefix}-{snapshot.id}')
+    def _delete_snapshot(self, snapshot):
+        cache_path = self._local_volume_from_snap_cache_path(snapshot)
+        if os.access(cache_path, os.F_OK):
+            self._remove_from_vol_cache(
+                cache_path,
+                ".parent-" + snapshot.id, snapshot.volume)
+        super(QuobyteDriver, self)._delete_snapshot(snapshot)
+
+    def _ensure_volume_from_snap_cache(self, mount_path):
+        """This expects the Quobyte volume to be mounted & available"""
+        cache_path = os.path.join(mount_path,
+                                  self.QUOBYTE_VOLUME_SNAP_CACHE_DIR_NAME)
+        if not os.access(cache_path, os.F_OK):
+            LOG.info("Volume from snapshot cache directory does not exist,"
+                     "creating the directory %(volcache)",
+                     {'volcache': cache_path})
+            os.makedirs(cache_path)
+        if not (os.access(cache_path, os.R_OK)
+                and os.access(cache_path, os.W_OK)
+                and os.access(cache_path, os.X_OK)):
+            msg = ("Insufficient permissions for Quobyte volume from snapshot"
+                   "cache directory at %(cpath) . Please update permissions.",
+                   {'cpath': cache_path})
+            raise exception.VolumeDriverException(msg)
+        LOG.debug("Quobyte volume from snapshot cache directory validated ok")
+
+    def _get_backing_chain_for_path(self, volume, path):
+        raw_chain = super(QuobyteDriver, self)._get_backing_chain_for_path(
+            volume, path)
+        # if the last element resides in the cache snip it off, as the RemoteFS
+        # driver cannot handle it.
+        if raw_chain.__len__() > 0:
+            if (self.QUOBYTE_VOLUME_SNAP_CACHE_DIR_NAME in
+                    raw_chain[-1]['filename']):
+                del raw_chain[-1]
+        return raw_chain
+
+    def _local_volume_from_snap_cache_path(self, snapshot):
+        path_to_disk = os.path.join(
+            self._local_volume_dir(snapshot.volume),
+            self.QUOBYTE_VOLUME_SNAP_CACHE_DIR_NAME,
+            snapshot.id)
+
+        return path_to_disk
+
+    def _qemu_img_info_base(self, path, volume_name, basedir,
+                            run_as_root=False):
+        """Sanitize image_utils' qemu_img_info.
+
+        This code expects to deal only with relative filenames.
+        """
+
+        # NOTE(kaisers): This overrides the remotefs.py method in
+        # order to allow for backing files in the volume_from_snapshot_cache.
+        if run_as_root is not self._execute_as_root:
+            LOG.debug("Conflicting run_as_root setting for "
+                      "_qemu-img_info_base, using configured drivers value.")
+        info = image_utils.qemu_img_info(path,
+                                         run_as_root=self._execute_as_root)
+        if info.image:
+            info.image = os.path.basename(info.image)
+        if info.backing_file:
+            if self._VALID_IMAGE_EXTENSIONS:
+                valid_ext = r'(\.(%s))?' % '|'.join(
+                    self._VALID_IMAGE_EXTENSIONS)
+            else:
+                valid_ext = ''
+
+            backing_file_template = \
+                "(%(basedir)s/[0-9a-f]+/)?(%" \
+                "(volname)s(.(tmp-snap-)?[0-9a-f-]+)?%(valid_ext)s|" \
+                "%(cache)s/(tmp-snap-)?[0-9a-f-]+(.(child-|.parent-)" \
+                "[0-9a-f-]+)?)$" % {
+                    'basedir': basedir,
+                    'volname': volume_name,
+                    'valid_ext': valid_ext,
+                    'cache': self.QUOBYTE_VOLUME_SNAP_CACHE_DIR_NAME,
+                }
+            if not re.match(backing_file_template, info.backing_file,
+                            re.IGNORECASE):
+                msg = _("File %(path)s has invalid backing file "
+                        "%(bfile)s, aborting.") % {'path': path,
+                                                   'bfile': info.backing_file}
+                raise exception.RemoteFSException(msg)
+
+            info.backing_file = os.path.basename(info.backing_file)
+
+        return info
+
+    def _remove_from_vol_cache(self, cache_file_path, ref_suffix, volume):
+        """Removes a reference and possibly volume from the volume cache
+
+        This method removes the ref_id reference (soft link) from the cache.
+        If no other references exist the cached volume itself is removed,
+        too.
+
+        :param cache_file_path file path to the volume in the cache
+        :param ref_suffix The id based suffix of the cache file reference
+        :param volume The volume whose share defines the cache to address
+        """
+        # NOTE(kaisers): As the cache_file_path may be a relative path we use
+        # cache dir and file name to ensure absolute paths in all operations.
+        cache_path = os.path.join(self._local_volume_dir(volume),
+                                  self.QUOBYTE_VOLUME_SNAP_CACHE_DIR_NAME)
+        cache_file_name = os.path.basename(cache_file_path)
+        # delete the reference
+        LOG.debug("Deleting cache reference %(ref)s",
+                  {"ref": cache_file_path + ref_suffix})
+        fileutils.delete_if_exists(os.path.join(cache_path,
+                                                cache_file_name + ref_suffix))
+
+        # If no other reference exists, remove the cache entry.
+        for file in os.listdir(cache_path):
+            if fnmatch(file, cache_file_name + ".*"):
+                # found another reference file, keep cache entry
+                LOG.debug("Cached volume %(file)s still has at least one "
+                          "reference: %(ref)s",
+                          {"file": cache_file_name, "ref": file})
+                return
+        # No other reference found, remove cache entry
+        LOG.debug("Removing cached volume %(cvol)s as no more references for "
+                  "this cached volume exist.",
+                  {"cvol": os.path.join(cache_path, cache_file_name)})
+        fileutils.delete_if_exists(os.path.join(cache_path, cache_file_name))
+
     def do_setup(self, context):
         """Any initialization the volume driver does while starting."""
         super(QuobyteDriver, self).do_setup(context)
@@ -111,6 +264,17 @@ class QuobyteDriver(remotefs_drv.RemoteFSSnapDriverDistributed):
         self.set_nas_security_options(is_new_cinder_install=False)
         self.shares = {}  # address : options
         self._nova = compute.API()
+        self.base = self.configuration.quobyte_mount_point_base
+        if self.configuration.quobyte_overlay_volumes:
+            if not (self.configuration.quobyte_qcow2_volumes and
+                    self.configuration.quobyte_volume_from_snapshot_cache):
+                self.configuration.quobyte_overlay_volumes = False
+                LOG.warning("Configuration of quobyte_qcow2_volumes and "
+                            "quobyte_volume_from_snapshot_cache is "
+                            "incompatible with"
+                            "quobyte_overlay_volumes=True. "
+                            "quobyte_overlay_volumes"
+                            "setting will be ignored.")
 
     def check_for_setup_error(self):
         if not self.configuration.quobyte_volume_url:
@@ -174,7 +338,7 @@ class QuobyteDriver(remotefs_drv.RemoteFSSnapDriverDistributed):
                         "(allowing other/world read & write access).")
 
     def _qemu_img_info(self, path, volume_name):
-        return super(QuobyteDriver, self)._qemu_img_info_base(
+        return self._qemu_img_info_base(
             path, volume_name, self.configuration.quobyte_mount_point_base)
 
     @utils.synchronized('quobyte', external=False)
@@ -182,6 +346,33 @@ class QuobyteDriver(remotefs_drv.RemoteFSSnapDriverDistributed):
         """Creates a clone of the specified volume."""
         return self._create_cloned_volume(volume, src_vref)
 
+    @coordination.synchronized(
+        '{self.driver_prefix}-{snapshot.id}-{volume.id}')
+    def _create_volume_from_snapshot(self, volume, snapshot):
+        """Creates a volume from a snapshot.
+
+        Snapshot must not be the active snapshot. (offline)
+        """
+
+        LOG.debug('Creating volume %(vol)s from snapshot %(snap)s',
+                  {'vol': volume.id, 'snap': snapshot.id})
+
+        if snapshot.status != 'available':
+            msg = _('Snapshot status must be "available" to clone. '
+                    'But is: %(status)s') % {'status': snapshot.status}
+
+            raise exception.InvalidSnapshot(msg)
+
+        self._ensure_shares_mounted()
+
+        volume.provider_location = self._find_share(volume)
+
+        self._copy_volume_from_snapshot(snapshot,
+                                        volume,
+                                        volume.size)
+
+        return {'provider_location': volume.provider_location}
+
     @utils.synchronized('quobyte', external=False)
     def create_volume(self, volume):
         return super(QuobyteDriver, self).create_volume(volume)
@@ -190,31 +381,34 @@ class QuobyteDriver(remotefs_drv.RemoteFSSnapDriverDistributed):
     def create_volume_from_snapshot(self, volume, snapshot):
         return self._create_volume_from_snapshot(volume, snapshot)
 
+    @coordination.synchronized('{self.driver_prefix}-{volume.id}')
     def _copy_volume_from_snapshot(self, snapshot, volume, volume_size):
         """Copy data from snapshot to destination volume.
 
         This is done with a qemu-img convert to raw/qcow2 from the snapshot
-        qcow2.
+        qcow2. If the quobyte_volume_from_snapshot_cache is active the result
+        is written into the cache and all volumes created from this
+        snapshot id are created directly from the cache.
         """
 
         LOG.debug("snapshot: %(snap)s, volume: %(vol)s, ",
                   {'snap': snapshot.id,
                    'vol': volume.id,
                    'size': volume_size})
-
         info_path = self._local_path_volume_info(snapshot.volume)
         snap_info = self._read_info_file(info_path)
         vol_path = self._local_volume_dir(snapshot.volume)
         forward_file = snap_info[snapshot.id]
         forward_path = os.path.join(vol_path, forward_file)
 
+        self._ensure_shares_mounted()
         # Find the file which backs this file, which represents the point
         # when this snapshot was created.
-        img_info = self._qemu_img_info(forward_path,
-                                       snapshot.volume.name)
+        img_info = self._qemu_img_info(forward_path, snapshot.volume.name)
         path_to_snap_img = os.path.join(vol_path, img_info.backing_file)
 
         path_to_new_vol = self._local_path_volume(volume)
+        path_to_cached_vol = self._local_volume_from_snap_cache_path(snapshot)
 
         LOG.debug("will copy from snapshot at %s", path_to_snap_img)
 
@@ -223,14 +417,60 @@ class QuobyteDriver(remotefs_drv.RemoteFSSnapDriverDistributed):
         else:
             out_format = 'raw'
 
-        image_utils.convert_image(path_to_snap_img,
-                                  path_to_new_vol,
-                                  out_format,
-                                  run_as_root=self._execute_as_root)
-
-        self._set_rw_permissions_for_all(path_to_new_vol)
-
-    @utils.synchronized('quobyte', external=False)
+        if not self.configuration.quobyte_volume_from_snapshot_cache:
+            LOG.debug("Creating direct copy from snapshot")
+            image_utils.convert_image(path_to_snap_img,
+                                      path_to_new_vol,
+                                      out_format,
+                                      run_as_root=self._execute_as_root)
+        else:
+            # create the volume via volume cache
+            if not os.access(path_to_cached_vol, os.F_OK):
+                LOG.debug("Caching volume %(volpath)s from snapshot.",
+                          {'volpath': path_to_cached_vol})
+                image_utils.convert_image(path_to_snap_img,
+                                          path_to_cached_vol,
+                                          out_format,
+                                          run_as_root=self._execute_as_root)
+                if self.configuration.quobyte_overlay_volumes:
+                    # NOTE(kaisers): Create a parent symlink to track the
+                    # existence of the parent
+                    os.symlink(path_to_snap_img, path_to_cached_vol
+                               + '.parent-' + snapshot.id)
+            if self.configuration.quobyte_overlay_volumes:
+                self._create_overlay_volume_from_snapshot(volume,
+                                                          snapshot,
+                                                          volume_size,
+                                                          out_format)
+            else:
+                # Copy volume from cache
+                LOG.debug("Copying volume %(volpath)s from cache",
+                          {'volpath': path_to_new_vol})
+                shutil.copyfile(path_to_cached_vol, path_to_new_vol)
+        self._set_rw_permissions(path_to_new_vol)
+
+    def _create_overlay_volume_from_snapshot(self, volume, snapshot,
+                                             volume_size, out_format):
+        """Creates an overlay volume based on a parent in the cache
+
+        Besides the overlay volume this also creates a softlink in the cache
+        that  links to the child volume file of the cached volume. This can
+        be used to track the cached volumes child volume and marks the fact
+        that this child still exists. The softlink is deleted when
+        the child is deleted.
+        """
+        rel_path = os.path.join(
+            self.QUOBYTE_VOLUME_SNAP_CACHE_DIR_NAME, snapshot.id)
+        command = ['qemu-img', 'create', '-f', 'qcow2', '-o',
+                   'backing_file=%s,backing_fmt=%s' %
+                   (rel_path, out_format), self._local_path_volume(volume),
+                   "%dG" % volume_size]
+        self._execute(*command, run_as_root=self._execute_as_root)
+        os.symlink(self._local_path_volume(volume),
+                   self._local_volume_from_snap_cache_path(snapshot)
+                   + '.child-' + volume.id)
+
+    @coordination.synchronized('{self.driver_prefix}-{volume.id}')
     def delete_volume(self, volume):
         """Deletes a logical volume."""
 
@@ -242,8 +482,17 @@ class QuobyteDriver(remotefs_drv.RemoteFSSnapDriverDistributed):
         self._ensure_share_mounted(volume.provider_location)
 
         volume_dir = self._local_volume_dir(volume)
-        mounted_path = os.path.join(volume_dir,
-                                    self.get_active_image_from_info(volume))
+        active_image = self.get_active_image_from_info(volume)
+        mounted_path = os.path.join(volume_dir, active_image)
+        if os.access(self.local_path(volume), os.F_OK):
+            img_info = self._qemu_img_info(self.local_path(volume),
+                                           volume.name)
+            if (img_info.backing_file and
+                    (self.QUOBYTE_VOLUME_SNAP_CACHE_DIR_NAME in
+                        img_info.backing_file)):
+                # This is an overlay volume, call cache cleanup
+                self._remove_from_vol_cache(img_info.backing_file,
+                                            ".child-" + volume.id, volume)
 
         self._execute('rm', '-f', mounted_path,
                       run_as_root=self._execute_as_root)
@@ -263,11 +512,6 @@ class QuobyteDriver(remotefs_drv.RemoteFSSnapDriverDistributed):
         return self._create_snapshot(snapshot)
 
     @utils.synchronized('quobyte', external=False)
-    def delete_snapshot(self, snapshot):
-        """Apply locking to the delete snapshot operation."""
-        self._delete_snapshot(snapshot)
-
-    @utils.synchronized('quobyte', external=False)
     def initialize_connection(self, volume, connector):
         """Allow connection to connector and return connection info."""
 
@@ -467,6 +711,8 @@ class QuobyteDriver(remotefs_drv.RemoteFSSnapDriverDistributed):
 
         if mounted:
             self._validate_volume(mount_path)
+            if self.configuration.quobyte_volume_from_snapshot_cache:
+                self._ensure_volume_from_snap_cache(mount_path)
 
     def _validate_volume(self, mount_path):
         """Runs a number of tests on the expect Quobyte mount"""
