diff --git nova/tests/unit/virt/libvirt/volume/test_quobyte.py nova/tests/unit/virt/libvirt/volume/test_quobyte.py
index 8d16cad..410da74 100644
--- nova/tests/unit/virt/libvirt/volume/test_quobyte.py
+++ nova/tests/unit/virt/libvirt/volume/test_quobyte.py
@@ -31,9 +31,12 @@ from nova.virt.libvirt.volume import quobyte
 class QuobyteTestCase(test.NoDBTestCase):
     """Tests the nova.virt.libvirt.volume.quobyte module utilities."""
 
+    @mock.patch.object(os.path, "exists", return_value=False)
     @mock.patch.object(fileutils, "ensure_tree")
     @mock.patch.object(utils, "execute")
-    def test_quobyte_mount_volume(self, mock_execute, mock_ensure_tree):
+    def test_quobyte_mount_volume_not_systemd(self, mock_execute,
+                                              mock_ensure_tree,
+                                              mock_exists):
         mnt_base = '/mnt'
         quobyte_volume = '192.168.1.1/volume-00001'
         export_mnt_base = os.path.join(mnt_base,
@@ -48,12 +51,40 @@ class QuobyteTestCase(test.NoDBTestCase):
                                        check_exit_code=[0, 4])
                              ]
         mock_execute.assert_has_calls(expected_commands)
+        mock_exists.assert_called_once_with(" /run/systemd/system")
 
+    @mock.patch.object(os.path, "exists", return_value=True)
+    @mock.patch.object(fileutils, "ensure_tree")
+    @mock.patch.object(utils, "execute")
+    def test_quobyte_mount_volume_systemd(self, mock_execute,
+                                          mock_ensure_tree,
+                                          mock_exists):
+        mnt_base = '/mnt'
+        quobyte_volume = '192.168.1.1/volume-00001'
+        export_mnt_base = os.path.join(mnt_base,
+                                       utils.get_hash_str(quobyte_volume))
+
+        quobyte.mount_volume(quobyte_volume, export_mnt_base)
+
+        mock_ensure_tree.assert_called_once_with(export_mnt_base)
+        expected_commands = [mock.call('systemd-run',
+                                       '--scope',
+                                       '--user',
+                                       'mount.quobyte',
+                                       quobyte_volume,
+                                       export_mnt_base,
+                                       check_exit_code=[0, 4])
+                             ]
+        mock_execute.assert_has_calls(expected_commands)
+        mock_exists.assert_called_once_with(" /run/systemd/system")
+
+    @mock.patch.object(os.path, "exists", return_value=False)
     @mock.patch.object(fileutils, "ensure_tree")
     @mock.patch.object(utils, "execute")
     def test_quobyte_mount_volume_with_config(self,
                                               mock_execute,
-                                              mock_ensure_tree):
+                                              mock_ensure_tree,
+                                              mock_exists):
         mnt_base = '/mnt'
         quobyte_volume = '192.168.1.1/volume-00001'
         export_mnt_base = os.path.join(mnt_base,
@@ -73,6 +104,7 @@ class QuobyteTestCase(test.NoDBTestCase):
                                        check_exit_code=[0, 4])
                              ]
         mock_execute.assert_has_calls(expected_commands)
+        mock_exists.assert_called_once_with(" /run/systemd/system")
 
     @mock.patch.object(fileutils, "ensure_tree")
     @mock.patch.object(utils, "execute",
diff --git nova/virt/libvirt/volume/quobyte.py nova/virt/libvirt/volume/quobyte.py
index 199439b..c9ea879 100644
--- nova/virt/libvirt/volume/quobyte.py
+++ nova/virt/libvirt/volume/quobyte.py
@@ -56,13 +56,17 @@ def mount_volume(volume, mnt_base, configfile=None):
     fileutils.ensure_tree(mnt_base)
 
     command = ['mount.quobyte', volume, mnt_base]
+    if os.path.exists(" /run/systemd/system"):
+        # Note(kaisers): with systemd this requires a separate CGROUP to
+        # prevent Nova service stop/restarts from killing the mount.
+        command = ['systemd-run', '--scope', '--user', 'mount.quobyte', volume,
+                   mnt_base]
     if configfile:
         command.extend(['-c', configfile])
 
     LOG.debug('Mounting volume %s at mount point %s ...',
               volume,
               mnt_base)
-    # Run mount command but do not fail on already mounted exit code
     utils.execute(*command, check_exit_code=[0, 4])
     LOG.info(_LI('Mounted volume: %s'), volume)
 
@@ -138,8 +142,8 @@ class LibvirtQuobyteVolumeDriver(fs.LibvirtBaseFileSystemVolumeDriver):
 
         if not mounted:
             mount_volume(quobyte_volume,
-                                 mount_path,
-                                 CONF.libvirt.quobyte_client_cfg)
+                         mount_path,
+                         CONF.libvirt.quobyte_client_cfg)
 
         validate_volume(mount_path)
 
