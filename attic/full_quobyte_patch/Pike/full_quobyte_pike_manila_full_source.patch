diff --git a/manila/share/drivers/quobyte/jsonrpc.py b/manila/share/drivers/quobyte/jsonrpc.py
index ba4b60ec..df752802 100644
--- a/manila/share/drivers/quobyte/jsonrpc.py
+++ b/manila/share/drivers/quobyte/jsonrpc.py
@@ -59,7 +59,9 @@ class JsonRpc(object):
         self._cert_file = cert_file
 
     @utils.synchronized('quobyte-request')
-    def call(self, method_name, user_parameters, expected_errors=[]):
+    def call(self, method_name, user_parameters, expected_errors=None):
+        if expected_errors is None:
+            expected_errors = []
         # prepare request
         self._id += 1
         parameters = {'retry': 'INFINITELY'}  # Backend specific setting
@@ -103,7 +105,9 @@ class JsonRpc(object):
         LOG.debug("Backend request resulted in error: %s", result.text)
         result.raise_for_status()
 
-    def _checked_for_application_error(self, result, expected_errors=[]):
+    def _checked_for_application_error(self, result, expected_errors=None):
+        if expected_errors is None:
+            expected_errors = []
         if 'error' in result and result['error']:
             if 'message' in result['error'] and 'code' in result['error']:
                 if result["error"]["code"] in expected_errors:
diff --git a/manila/share/drivers/quobyte/quobyte.py b/manila/share/drivers/quobyte/quobyte.py
index 55d7eeb9..1b21ac24 100644
--- a/manila/share/drivers/quobyte/quobyte.py
+++ b/manila/share/drivers/quobyte/quobyte.py
@@ -78,9 +78,10 @@ class QuobyteShareDriver(driver.ExecuteMixin, driver.ShareDriver,):
         1.2.3   - Updated RPC layer for improved stability
         1.2.4   - Fixed handling updated QB API error codes
         1.2.5   - Fixed two quota handling bugs
+        1.2.6   - Fixed volume resize and jsonrpc code style bugs
     """
 
-    DRIVER_VERSION = '1.2.5'
+    DRIVER_VERSION = '1.2.6'
 
     def __init__(self, *args, **kwargs):
         super(QuobyteShareDriver, self).__init__(False, *args, **kwargs)
@@ -89,9 +90,8 @@ class QuobyteShareDriver(driver.ExecuteMixin, driver.ShareDriver,):
                              or CONF.share_backend_name or 'Quobyte')
 
     def _fetch_existing_access(self, context, share):
-        volume_uuid = self._resolve_volume_name(
-            share['name'],
-            self._get_project_name(context, share['project_id']))
+        volume_uuid = self._resolve_volume_name(share['name'],
+                                                share['project_id'])
         result = self.rpc.call('getConfiguration', {})
         if result is None:
             raise exception.QBException(
@@ -184,7 +184,8 @@ class QuobyteShareDriver(driver.ExecuteMixin, driver.ShareDriver,):
         self.rpc.call('setQuota', {"quotas": [
             {"consumer":
                 [{"type": "VOLUME",
-                  "identifier": share["name"],
+                  "identifier": self._resolve_volume_name(share["name"],
+                                                          share['project_id']),
                   "tenant_id": share["project_id"]}],
              "limits": [{"type": "LOGICAL_DISK_SPACE",
                         "value": newsize_bytes}]}
@@ -223,9 +224,8 @@ class QuobyteShareDriver(driver.ExecuteMixin, driver.ShareDriver,):
             raise exception.QBException(
                 _('Quobyte driver only supports NFS shares'))
 
-        volume_uuid = self._resolve_volume_name(
-            share['name'],
-            self._get_project_name(context, share['project_id']))
+        volume_uuid = self._resolve_volume_name(share['name'],
+                                                share['project_id'])
 
         if not volume_uuid:
             # create tenant, expect ERROR_GARBAGE_ARGS if it already exists
@@ -251,9 +251,8 @@ class QuobyteShareDriver(driver.ExecuteMixin, driver.ShareDriver,):
 
     def delete_share(self, context, share, share_server=None):
         """Delete the corresponding Quobyte volume."""
-        volume_uuid = self._resolve_volume_name(
-            share['name'],
-            self._get_project_name(context, share['project_id']))
+        volume_uuid = self._resolve_volume_name(share['name'],
+                                                share['project_id'])
         if not volume_uuid:
             LOG.warning("No volume found for "
                         "share %(project_id)s/%(name)s",
@@ -281,9 +280,8 @@ class QuobyteShareDriver(driver.ExecuteMixin, driver.ShareDriver,):
             the backend
         """
 
-        volume_uuid = self._resolve_volume_name(
-            share['name'],
-            self._get_project_name(context, share['project_id']))
+        volume_uuid = self._resolve_volume_name(share['name'],
+                                                share['project_id'])
 
         LOG.debug("Ensuring Quobyte share %s", share['name'])
 
@@ -303,9 +301,8 @@ class QuobyteShareDriver(driver.ExecuteMixin, driver.ShareDriver,):
             raise exception.InvalidShareAccess(
                 _('Quobyte driver only supports ip access control'))
 
-        volume_uuid = self._resolve_volume_name(
-            share['name'],
-            self._get_project_name(context, share['project_id']))
+        volume_uuid = self._resolve_volume_name(share['name'],
+                                                share['project_id'])
         ro = access['access_level'] == (constants.ACCESS_LEVEL_RO)
         call_params = {
             "volume_uuid": volume_uuid,
@@ -322,9 +319,8 @@ class QuobyteShareDriver(driver.ExecuteMixin, driver.ShareDriver,):
                       self._get_project_name(context, share['project_id']))
             return
 
-        volume_uuid = self._resolve_volume_name(
-            share['name'],
-            self._get_project_name(context, share['project_id']))
+        volume_uuid = self._resolve_volume_name(share['name'],
+                                                share['project_id'])
         call_params = {
             "volume_uuid": volume_uuid,
             "remove_allow_ip": access['access_to']}
diff --git a/manila/tests/share/drivers/quobyte/test_quobyte.py b/manila/tests/share/drivers/quobyte/test_quobyte.py
index a43b3c01..1da79daa 100644
--- a/manila/tests/share/drivers/quobyte/test_quobyte.py
+++ b/manila/tests/share/drivers/quobyte/test_quobyte.py
@@ -416,7 +416,9 @@ class QuobyteShareDriverTestCase(test.TestCase):
         mock_qsd_resize_share.assert_called_once_with(share=self.share,
                                                       new_size=2)
 
-    def test_resize_share(self):
+    @mock.patch.object(quobyte.QuobyteShareDriver, "_resolve_volume_name",
+                       return_value="fake_volume_uuid")
+    def test_resize_share(self, mock_qb_resolv):
         self._driver.rpc.call = mock.Mock(wraps=fake_rpc_handler)
         manila_size = 7
         newsize_bytes = manila_size * units.Gi
@@ -427,7 +429,7 @@ class QuobyteShareDriverTestCase(test.TestCase):
             "quotas": [{
                 "consumer": [{
                     "type": "VOLUME",
-                    "identifier": self.share["name"],
+                    "identifier": "fake_volume_uuid",
                     "tenant_id": self.share["project_id"]
                 }],
                 "limits": [{
@@ -437,6 +439,8 @@ class QuobyteShareDriverTestCase(test.TestCase):
             }]}
         self._driver.rpc.call.assert_has_calls([
             mock.call('setQuota', exp_params)])
+        mock_qb_resolv.assert_called_once_with(self.share['name'],
+                                               self.share['project_id'])
 
     @mock.patch.object(quobyte.QuobyteShareDriver,
                        "_resolve_volume_name",
diff --git a/releasenotes/notes/bug-1774604-qb-driver-b7e717cbc71d6189.yaml b/releasenotes/notes/bug-1774604-qb-driver-b7e717cbc71d6189.yaml
new file mode 100644
index 00000000..f3de72a6
--- /dev/null
+++ b/releasenotes/notes/bug-1774604-qb-driver-b7e717cbc71d6189.yaml
@@ -0,0 +1,5 @@
+---
+fixes:
+  - |
+    Fixed a bug in the Quobyte driver that allowed share resizing to
+    incorrectly address the share to be resized in the backend.
