diff --git cinder/volume/drivers/quobyte.py cinder/volume/drivers/quobyte.py
index 8d77e65..32d4021 100644
--- cinder/volume/drivers/quobyte.py
+++ cinder/volume/drivers/quobyte.py
@@ -16,6 +16,7 @@
 
 import errno
 import os
+import psutil
 
 from oslo_concurrency import processutils
 from oslo_config import cfg
@@ -30,14 +31,14 @@ from cinder import interface
 from cinder import utils
 from cinder.volume.drivers import remotefs as remotefs_drv
 
-VERSION = '1.1'
+VERSION = '1.1.5'
 
 LOG = logging.getLogger(__name__)
 
 volume_opts = [
-    cfg.URIOpt('quobyte_volume_url',
-               help=('URL to the Quobyte volume e.g.,'
-                     ' quobyte://<DIR host>/<volume name>')),
+    cfg.StrOpt('quobyte_volume_url',
+               help=('Quobyte URL to the Quobyte volume e.g.,'
+                     ' quobyte://<DIR host1>, <DIR host2>/<volume name>')),
     cfg.StrOpt('quobyte_client_cfg',
                help=('Path to a Quobyte Client configuration file.')),
     cfg.BoolOpt('quobyte_sparsed_volumes',
@@ -79,6 +80,10 @@ class QuobyteDriver(remotefs_drv.RemoteFSSnapDriverDistributed):
     Version history:
         1.0   - Initial driver.
         1.1   - Adds optional insecure NAS settings
+        1.1.1 - Removes getfattr calls from driver
+        1.1.2 - Fixes a bug in the creation of cloned volumes
+        1.1.4 - Fixes capability to configure redundancy in quobyte_volume_url
+        1.1.5 - Enables extension of volumes with snapshots
     """
 
     driver_volume_type = 'quobyte'
@@ -172,7 +177,7 @@ class QuobyteDriver(remotefs_drv.RemoteFSSnapDriverDistributed):
     @utils.synchronized('quobyte', external=False)
     def create_cloned_volume(self, volume, src_vref):
         """Creates a clone of the specified volume."""
-        self._create_cloned_volume(volume, src_vref)
+        return self._create_cloned_volume(volume, src_vref)
 
     @utils.synchronized('quobyte', external=False)
     def create_volume(self, volume):
@@ -295,14 +300,6 @@ class QuobyteDriver(remotefs_drv.RemoteFSSnapDriverDistributed):
     @utils.synchronized('quobyte', external=False)
     def extend_volume(self, volume, size_gb):
         volume_path = self.local_path(volume)
-        volume_filename = os.path.basename(volume_path)
-
-        # Ensure no snapshots exist for the volume
-        active_image = self.get_active_image_from_info(volume)
-        if volume_filename != active_image:
-            msg = _('Extend volume is only supported for this'
-                    ' driver when no snapshots exist.')
-            raise exception.InvalidVolume(msg)
 
         info = self._qemu_img_info(volume_path, volume.name)
         backing_fmt = info.file_format
@@ -312,7 +309,10 @@ class QuobyteDriver(remotefs_drv.RemoteFSSnapDriverDistributed):
             raise exception.InvalidVolume(msg % backing_fmt)
 
         # qemu-img can resize both raw and qcow2 files
-        image_utils.resize_image(volume_path, size_gb)
+        active_path = os.path.join(
+            self._get_mount_point_for_share(volume.provider_location),
+            self.get_active_image_from_info(volume))
+        image_utils.resize_image(active_path, size_gb)
 
     def _do_create_volume(self, volume):
         """Create a volume on given Quobyte volume.
@@ -465,16 +465,40 @@ class QuobyteDriver(remotefs_drv.RemoteFSSnapDriverDistributed):
             self._validate_volume(mount_path)
 
     def _validate_volume(self, mount_path):
-        """Wraps execute calls for checking validity of a Quobyte volume"""
-        command = ['getfattr', "-n", "quobyte.info", mount_path]
-        try:
-            self._execute(*command, run_as_root=self._execute_as_root)
-        except processutils.ProcessExecutionError as exc:
-            msg = (_("The mount %(mount_path)s is not a valid"
-                     " Quobyte USP volume. Error: %(exc)s")
-                   % {'mount_path': mount_path, 'exc': exc})
-            raise exception.VolumeDriverException(msg)
-
-        if not os.access(mount_path, os.W_OK | os.X_OK):
-            LOG.warning(_LW("Volume is not writable. Please broaden the file"
-                            " permissions. Mount: %s"), mount_path)
+        """Runs a number of tests on the expect Quobyte mount"""
+        partitions = psutil.disk_partitions(all=True)
+        for p in partitions:
+            if mount_path == p.mountpoint:
+                if p.device.startswith("quobyte@"):
+                    try:
+                        statresult = os.stat(mount_path)
+                        if statresult.st_size == 0:
+                            # client looks healthy
+                            if not os.access(mount_path,
+                                             os.W_OK | os.X_OK):
+                                LOG.warning(_LW("Volume is not writable. "
+                                                "Please broaden the file"
+                                                " permissions."
+                                                " Mount: %s"),
+                                            mount_path)
+                            return  # we're happy here
+                        else:
+                            msg = (_("The mount %(mount_path)s is not a "
+                                     "valid Quobyte volume. Stale mount?")
+                                   % {'mount_path': mount_path})
+                        raise exception.VolumeDriverException(msg)
+                    except Exception as exc:
+                        msg = (_("The mount %(mount_path)s is not a valid"
+                                 " Quobyte volume. Error: %(exc)s . "
+                                 " Possibly a Quobyte client crash?")
+                               % {'mount_path': mount_path, 'exc': exc})
+                        raise exception.VolumeDriverException(msg)
+                else:
+                    msg = (_("The mount %(mount_path)s is not a valid"
+                             " Quobyte volume according to partition list.")
+                           % {'mount_path': mount_path})
+                    raise exception.VolumeDriverException(msg)
+        msg = (_("No matching Quobyte mount entry for %(mount_path)s"
+                 " could be found for validation in partition list.")
+               % {'mount_path': mount_path})
+        raise exception.VolumeDriverException(msg)
diff --git cinder/volume/drivers/remotefs.py cinder/volume/drivers/remotefs.py
index 6f07cb9..e76c945 100644
--- cinder/volume/drivers/remotefs.py
+++ cinder/volume/drivers/remotefs.py
@@ -227,6 +227,23 @@ class RemoteFSDriver(driver.BaseVD):
                   " mount_point_base.")
         return None
 
+    @staticmethod
+    def _validate_state(current_state,
+                        acceptable_states,
+                        obj_description='volume',
+                        invalid_exc=exception.InvalidVolume):
+        if current_state not in acceptable_states:
+            message = _('Invalid %(obj_description)s state. '
+                        'Acceptable states for this operation: '
+                        '%(acceptable_states)s. '
+                        'Current %(obj_description)s state: '
+                        '%(current_state)s.')
+            raise invalid_exc(
+                message=message %
+                dict(obj_description=obj_description,
+                     acceptable_states=acceptable_states,
+                     current_state=current_state))
+
     @utils.trace
     def create_volume(self, volume):
         """Creates a volume.
@@ -937,12 +954,10 @@ class RemoteFSSnapDriverBase(RemoteFSDriver):
                  {'src': src_vref.id,
                   'dst': volume.id})
 
-        if src_vref.status not in ['available', 'backing-up']:
-            msg = _("Source volume status must be 'available', or "
-                    "'backing-up' but is: "
-                    "%(status)s.") % {'status': src_vref.status}
-            raise exception.InvalidVolume(msg)
-
+        acceptable_states = ['available', 'backing-up', 'downloading']
+        self._validate_state(src_vref.status,
+                             acceptable_states,
+                             obj_description='source volume')
         volume_name = CONF.volume_name_template % volume.id
 
         # Create fake volume and snapshot objects
@@ -1017,12 +1032,9 @@ class RemoteFSSnapDriverBase(RemoteFSDriver):
                             else 'offline')})
 
         volume_status = snapshot.volume.status
-        if volume_status not in ['available', 'in-use', 'backing-up']:
-            msg = _("Volume status must be 'available', 'in-use' or "
-                    "'backing-up' but is: "
-                    "%(status)s.") % {'status': volume_status}
-
-            raise exception.InvalidVolume(msg)
+        acceptable_states = ['available', 'in-use', 'backing-up', 'deleting',
+                             'downloading']
+        self._validate_state(volume_status, acceptable_states)
 
         vol_path = self._local_volume_dir(snapshot.volume)
         self._ensure_share_writable(vol_path)
@@ -1327,12 +1339,15 @@ class RemoteFSSnapDriverBase(RemoteFSDriver):
                             else 'offline')})
 
         status = snapshot.volume.status
-        if status not in ['available', 'in-use', 'backing-up']:
-            msg = _("Volume status must be 'available', 'in-use' or "
-                    "'backing-up' but is: "
-                    "%(status)s.") % {'status': status}
 
-            raise exception.InvalidVolume(msg)
+        acceptable_states = ['available', 'in-use', 'backing-up']
+        if snapshot.id.startswith('tmp-snap-'):
+            # This is an internal volume snapshot. In order to support
+            # image caching, we'll allow creating/deleting such snapshots
+            # while having volumes in 'downloading' state.
+            acceptable_states.append('downloading')
+
+        self._validate_state(status, acceptable_states)
 
         info_path = self._local_path_volume_info(snapshot.volume)
         snap_info = self._read_info_file(info_path, empty_if_missing=True)
