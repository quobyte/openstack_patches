diff --git nova/tests/unit/virt/libvirt/test_imagebackend.py nova/tests/unit/virt/libvirt/test_imagebackend.py
index a083a2c..9757ff8 100644
--- nova/tests/unit/virt/libvirt/test_imagebackend.py
+++ nova/tests/unit/virt/libvirt/test_imagebackend.py
@@ -120,9 +120,8 @@ class _ImageTestCase(object):
             image.cache(fake_fetch, self.TEMPLATE_PATH, self.SIZE)
 
             self.assertEqual(fake_processutils.fake_execute_get_log(),
-                ['fallocate -l 1 %s.fallocate_test' % self.PATH,
-                 'fallocate -n -l %s %s' % (self.SIZE, self.PATH),
-                 'fallocate -n -l %s %s' % (self.SIZE, self.PATH)])
+                ['truncate -s %s %s' % (self.SIZE, self.PATH),
+                 'truncate -s %s %s' % (self.SIZE, self.PATH)])
 
     def test_prealloc_image_without_write_access(self):
         CONF.set_override('preallocate_images', 'space')
diff --git nova/virt/libvirt/imagebackend.py nova/virt/libvirt/imagebackend.py
index bc7f05c..737a1a9 100644
--- nova/virt/libvirt/imagebackend.py
+++ nova/virt/libvirt/imagebackend.py
@@ -246,9 +246,11 @@ class Image(object):
             if os.path.exists(base) and size > self.get_disk_size(base):
                 self.resize_image(size)
 
-            if (self.preallocate and self._can_fallocate() and
-                    os.access(self.path, os.W_OK)):
-                utils.execute('fallocate', '-n', '-l', size, self.path)
+            if (self.preallocate and os.access(self.path, os.W_OK)):
+                LOG.debug('Truncating new image at %(path)s to virtual size '
+                          '(patched for Quobyte).',
+                          {'path': self.path})
+                utils.execute('truncate', '-s', size, self.path)
 
     def _can_fallocate(self):
         """Check once per class, whether fallocate(1) is available,
