diff --git a/nova/virt/libvirt/imagebackend.py b/nova/virt/libvirt/imagebackend.py
index 0f66888..8f42110 100644
--- a/virt/libvirt/imagebackend.py
+++ b/virt/libvirt/imagebackend.py
@@ -247,9 +247,11 @@ class Image(object):
             if os.path.exists(base) and size > self.get_disk_size(base):
                 self.resize_image(size)
 
-            if (self.preallocate and self._can_fallocate() and
-                    os.access(self.path, os.W_OK)):
-                utils.execute('fallocate', '-n', '-l', size, self.path)
+            if (self.preallocate and os.access(self.path, os.W_OK)):
+                LOG.debug('Truncating new image at %(path)s to virtual size '
+                          '(patched for Quobyte).',
+                          {'path': self.path})
+                utils.execute('truncate', '-s', size, self.path)
 
     def _can_fallocate(self):
         """Check once per class, whether fallocate(1) is available,
diff --git a/nova/virt/libvirt/volume/quobyte.py b/nova/virt/libvirt/volume/quobyte.py
index 284a084..1d41f6f 100644
--- a/virt/libvirt/volume/quobyte.py
+++ b/virt/libvirt/volume/quobyte.py
@@ -19,6 +19,7 @@ import os
 from oslo_concurrency import processutils
 from oslo_log import log as logging
 from oslo_utils import fileutils
+import psutil
 import six
 
 import nova.conf
@@ -44,22 +45,29 @@ def mount_volume(volume, mnt_base, configfile=None):
     """Wraps execute calls for mounting a Quobyte volume"""
     fileutils.ensure_tree(mnt_base)
 
-    command = ['mount.quobyte', volume, mnt_base]
+    # NOTE(kaisers): disable xattrs to speed up io as this omits
+    # additional metadata requests in the backend. xattrs can be
+    # enabled without issues but will reduce performance.
+    command = ['mount.quobyte', '--disable-xattrs', volume, mnt_base]
+    if os.path.exists("/run/systemd/system"):
+        # Note(kaisers): with systemd this requires a separate CGROUP to
+        # prevent Nova service stop/restarts from killing the mount.
+        command = ['systemd-run', '--scope', 'mount.quobyte',
+                   '--disable-xattrs', volume, mnt_base]
     if configfile:
         command.extend(['-c', configfile])
 
     LOG.debug('Mounting volume %s at mount point %s ...',
               volume,
               mnt_base)
-    # Run mount command but do not fail on already mounted exit code
-    utils.execute(*command, check_exit_code=[0, 4])
+    utils.execute(*command, run_as_root=True)
     LOG.info(_LI('Mounted volume: %s'), volume)
 
 
 def umount_volume(mnt_base):
     """Wraps execute calls for unmouting a Quobyte volume"""
     try:
-        utils.execute('umount.quobyte', mnt_base)
+        utils.execute('umount.quobyte', mnt_base, run_as_root=True)
     except processutils.ProcessExecutionError as exc:
         if 'Device or resource busy' in six.text_type(exc):
             LOG.error(_LE("The Quobyte volume at %s is still in use."),
@@ -69,21 +77,32 @@ def umount_volume(mnt_base):
                           mnt_base)
 
 
-def validate_volume(mnt_base):
-    """Wraps execute calls for checking validity of a Quobyte volume"""
-    command = ['getfattr', "-n", "quobyte.info", mnt_base]
-    try:
-        utils.execute(*command)
-    except processutils.ProcessExecutionError as exc:
-        msg = (_("The mount %(mount_path)s is not a valid"
-                 " Quobyte volume. Error: %(exc)s")
-               % {'mount_path': mnt_base, 'exc': exc})
-        raise nova_exception.InternalError(msg)
-
-    if not os.access(mnt_base, os.W_OK | os.X_OK):
-        msg = (_LE("Volume is not writable. Please broaden the file"
-                   " permissions. Mount: %s") % mnt_base)
-        raise nova_exception.InternalError(msg)
+def validate_volume(mount_path):
+    """Runs a number of tests to be sure this is a (working) Quobyte mount"""
+    partitions = psutil.disk_partitions(all=True)
+    for p in partitions:
+        if mount_path != p.mountpoint:
+            continue
+        if p.device.startswith("quobyte@"):
+            statresult = os.stat(mount_path)
+            # Note(kaisers): Quobyte always shows mount points with size 0
+            if statresult.st_size == 0:
+                # client looks healthy
+                return  # we're happy here
+            else:
+                msg = (_("The mount %(mount_path)s is not a "
+                         "valid Quobyte volume. Stale mount?")
+                       % {'mount_path': mount_path})
+            raise nova_exception.InvalidVolume(msg)
+        else:
+            msg = (_("The mount %(mount_path)s is not a valid"
+                     " Quobyte volume according to partition list.")
+                   % {'mount_path': mount_path})
+            raise nova_exception.InvalidVolume(msg)
+    msg = (_("No matching Quobyte mount entry for %(mount_path)s"
+             " could be found for validation in partition list.")
+           % {'mount_path': mount_path})
+    raise nova_exception.InvalidVolume(msg)
 
 
 class LibvirtQuobyteVolumeDriver(fs.LibvirtBaseFileSystemVolumeDriver):
@@ -106,7 +125,7 @@ class LibvirtQuobyteVolumeDriver(fs.LibvirtBaseFileSystemVolumeDriver):
 
         return conf
 
-    @utils.synchronized('connect_volume')
+    @utils.synchronized('connect_qb_volume')
     def connect_volume(self, connection_info, disk_info):
         """Connect the volume."""
         data = connection_info['data']
@@ -127,12 +146,12 @@ class LibvirtQuobyteVolumeDriver(fs.LibvirtBaseFileSystemVolumeDriver):
 
         if not mounted:
             mount_volume(quobyte_volume,
-                                 mount_path,
-                                 CONF.libvirt.quobyte_client_cfg)
+                         mount_path,
+                         CONF.libvirt.quobyte_client_cfg)
 
         validate_volume(mount_path)
 
-    @utils.synchronized('connect_volume')
+    @utils.synchronized('connect_qb_volume')
     def disconnect_volume(self, connection_info, disk_dev):
         """Disconnect the volume."""
 
