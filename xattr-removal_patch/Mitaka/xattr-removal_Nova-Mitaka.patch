diff --git a/nova/virt/libvirt/volume/quobyte.py b/nova/virt/libvirt/volume/quobyte.py
index 284a084..97a36ea 100644
--- a/nova/virt/libvirt/volume/quobyte.py
+++ b/nova/virt/libvirt/volume/quobyte.py
@@ -19,6 +19,7 @@
 from oslo_concurrency import processutils
 from oslo_log import log as logging
 from oslo_utils import fileutils
+import psutil
 import six
 
 import nova.conf
@@ -26,6 +27,7 @@
 from nova.i18n import _
 from nova.i18n import _LE
 from nova.i18n import _LI
+from nova.i18n import _LW
 from nova import utils
 from nova.virt.libvirt import utils as libvirt_utils
 from nova.virt.libvirt.volume import fs
@@ -44,7 +46,7 @@
     """Wraps execute calls for mounting a Quobyte volume"""
     fileutils.ensure_tree(mnt_base)
 
-    command = ['mount.quobyte', volume, mnt_base]
+    command = ['mount.quobyte', '--disable-xattrs', volume, mnt_base]
     if configfile:
         command.extend(['-c', configfile])
 
@@ -69,21 +71,46 @@
                           mnt_base)
 
 
-def validate_volume(mnt_base):
-    """Wraps execute calls for checking validity of a Quobyte volume"""
-    command = ['getfattr', "-n", "quobyte.info", mnt_base]
-    try:
-        utils.execute(*command)
-    except processutils.ProcessExecutionError as exc:
-        msg = (_("The mount %(mount_path)s is not a valid"
-                 " Quobyte volume. Error: %(exc)s")
-               % {'mount_path': mnt_base, 'exc': exc})
-        raise nova_exception.InternalError(msg)
-
-    if not os.access(mnt_base, os.W_OK | os.X_OK):
-        msg = (_LE("Volume is not writable. Please broaden the file"
-                   " permissions. Mount: %s") % mnt_base)
-        raise nova_exception.InternalError(msg)
+def validate_volume(mount_path):
+    """Runs a number of tests on the expected Quobyte mount"""
+    partitions = psutil.disk_partitions(all=True)
+    for p in partitions:
+        if mount_path != p.mountpoint:
+            continue
+        if p.device.startswith("quobyte@"):
+            try:
+                statresult = os.stat(mount_path)
+                # Note(kaisers): Quobyte always shows mount points with size 0
+                if statresult.st_size == 0:
+                    # client looks healthy
+                    if not os.access(mount_path,
+                                     os.W_OK | os.X_OK):
+                        LOG.warning(_LW("Volume is not writable. "
+                                        "Please broaden the file"
+                                        " permissions."
+                                        " Mount: %s"),
+                                    mount_path)
+                    return  # we're happy here
+                else:
+                    msg = (_("The mount %(mount_path)s is not a "
+                             "valid Quobyte volume. Stale mount?")
+                           % {'mount_path': mount_path})
+                raise nova_exception.InvalidVolume(msg)
+            except Exception as exc:
+                msg = (_("The mount %(mount_path)s is not a valid"
+                         " Quobyte volume. Error: %(exc)s . "
+                         " Possibly a Quobyte client crash?")
+                       % {'mount_path': mount_path, 'exc': exc})
+                raise nova_exception.InvalidVolume(msg)
+        else:
+            msg = (_("The mount %(mount_path)s is not a valid"
+                     " Quobyte volume according to partition list.")
+                   % {'mount_path': mount_path})
+            raise nova_exception.InvalidVolume(msg)
+    msg = (_("No matching Quobyte mount entry for %(mount_path)s"
+             " could be found for validation in partition list.")
+           % {'mount_path': mount_path})
+    raise nova_exception.InvalidVolume(msg)
 
 
 class LibvirtQuobyteVolumeDriver(fs.LibvirtBaseFileSystemVolumeDriver):
@@ -127,8 +154,8 @@
 
         if not mounted:
             mount_volume(quobyte_volume,
-                                 mount_path,
-                                 CONF.libvirt.quobyte_client_cfg)
+                         mount_path,
+                         CONF.libvirt.quobyte_client_cfg)
 
         validate_volume(mount_path)
 